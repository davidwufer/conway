// Generated by CoffeeScript 1.6.3
(function() {
  var Board, Cell, Constants, initBoard;

  jQuery(function() {
    return initBoard(20, 20);
  });

  initBoard = function(row, col) {
    var board, boardArea, cell, newElement, newRow, _i, _ref, _results;
    boardArea = Constants.boardAreaElement();
    board = new Board(row, col);
    _results = [];
    for (row = _i = 0, _ref = board.rows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
      newRow = jQuery('<tr>', {
        id: "row-" + row,
        "class": "table-row"
      });
      boardArea.append(newRow);
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (col = _j = 0, _ref1 = board.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
          cell = board.getCell(row, col);
          newElement = jQuery('<td>', {
            id: cell.getCellName(),
            "class": Constants.cellClass()
          });
          _results1.push(newRow.append(newElement));
        }
        return _results1;
      })());
    }
    return _results;
  };

  Constants = (function() {
    function Constants() {}

    Constants.boardAreaElement = function() {
      return $("#board-area");
    };

    Constants.cellClass = function() {
      return "table-col";
    };

    return Constants;

  })();

  Board = (function() {
    Board._init = function(board, row_count, col_count) {
      var col, row, rows, _i, _j, _results;
      _results = [];
      for (row = _i = 0; _i < row_count; row = _i += 1) {
        rows = [];
        for (col = _j = 0; _j < col_count; col = _j += 1) {
          rows.push(new Cell(row, col));
        }
        _results.push(board.push(rows));
      }
      return _results;
    };

    function Board(rows, cols) {
      this.rows = rows != null ? rows : 20;
      this.cols = cols != null ? cols : 20;
      this.board = [];
      Board._init(this.board, this.rows, this.cols);
    }

    Board.prototype.getCell = function(row, col) {
      return this.board[row][col];
    };

    return Board;

  })();

  Cell = (function() {
    function Cell(row, col, toggled) {
      this.row = row;
      this.col = col;
      this.toggled = toggled != null ? toggled : false;
    }

    Cell.prototype.toggle = function() {
      return this.toggled = !this.toggled;
    };

    Cell.prototype.getCellElement = function() {
      var div;
      div = "#" + getCellName();
      return $(div);
    };

    Cell.prototype.getCellName = function() {
      return "cell-" + this.row + "-" + this.col;
    };

    return Cell;

  })();

}).call(this);
