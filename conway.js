// Generated by CoffeeScript 1.6.3
(function() {
  var Board, Cell, Constants, initBoard, nextIteration, toggleCells;

  $(function() {
    var board;
    board = new Board(5, 5);
    initBoard(board);
    $("tr td").click(function() {
      return toggleCells($(this), board);
    });
    return $("button").click(function() {
      return nextIteration(board);
    });
  });

  nextIteration = function(board) {};

  toggleCells = function(elems, board) {
    var col, elem, row, split, _i, _len, _results;
    elems.toggleClass("live");
    _results = [];
    for (_i = 0, _len = elems.length; _i < _len; _i++) {
      elem = elems[_i];
      split = elem.id.split("-");
      row = parseInt(split[1]);
      col = parseInt(split[2]);
      _results.push(board.toggleCell(row, col));
    }
    return _results;
  };

  initBoard = function(board) {
    var boardArea, cell, col, newElement, newRow, row, _i, _ref, _results;
    boardArea = Constants.boardAreaElement();
    _results = [];
    for (row = _i = 0, _ref = board.rows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
      newRow = jQuery('<tr>', {
        id: "row-" + row,
        "class": "table-row"
      });
      boardArea.append(newRow);
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (col = _j = 0, _ref1 = board.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
          cell = board.getCell(row, col);
          newElement = jQuery('<td>', {
            id: cell.getCellName(),
            "class": Constants.cellClass()
          });
          _results1.push(newRow.append(newElement));
        }
        return _results1;
      })());
    }
    return _results;
  };

  Constants = (function() {
    function Constants() {}

    Constants.boardAreaElement = function() {
      return $("#board-area");
    };

    Constants.cellClass = function() {
      return "table-col";
    };

    return Constants;

  })();

  Board = (function() {
    Board.steps = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];

    Board._init = function(board, row_count, col_count) {
      var col, row, rows, _i, _j, _results;
      _results = [];
      for (row = _i = 0; _i < row_count; row = _i += 1) {
        rows = [];
        for (col = _j = 0; _j < col_count; col = _j += 1) {
          rows.push(new Cell(row, col));
        }
        _results.push(board.push(rows));
      }
      return _results;
    };

    function Board(rows, cols) {
      this.rows = rows != null ? rows : 20;
      this.cols = cols != null ? cols : 20;
      this.board = [];
      Board._init(this.board, this.rows, this.cols);
    }

    Board.prototype.toggleCell = function(row, col) {
      return this.getCell(row, col).toggle();
    };

    Board.prototype.getCell = function(row, col) {
      return this.board[row][col];
    };

    Board.prototype.getCellsToToggle = function() {
      var cell, cells, col, row, _i, _ref, _results;
      cells = [];
      _results = [];
      for (row = _i = 0, _ref = this.rows; _i < _ref; row = _i += 1) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = this.cols; _j < _ref1; col = _j += 1) {
            cell = this.getCell(row, col);
            if (this.shouldToggle(cell)) {
              _results1.push(cells.push(cell));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Board.prototype.shouldToggle = function(cell) {
      return this.shouldLive() !== cell.live();
    };

    Board.prototype.shouldLive = function(cell) {
      var numNeighbors;
      numNeighbors = this.getNeighbors(cell);
      if (cell.live) {
        return numNeighbors === 2 || numNeighbors === 3;
      } else {
        return numNeighbors === 3;
      }
    };

    return Board;

  })();

  Cell = (function() {
    function Cell(row, col, live) {
      this.row = row;
      this.col = col;
      this.live = live != null ? live : false;
    }

    Cell.prototype.toggle = function() {
      return this.live = !this.live;
    };

    Cell.prototype.getCellElement = function() {
      var div;
      div = "#" + getCellName();
      return $(div);
    };

    Cell.prototype.getCellName = function() {
      return ["cell", this.row, this.col].join("-");
    };

    return Cell;

  })();

}).call(this);
